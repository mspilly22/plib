// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: txtmsg/lease.proto

package descpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WaitStats_Usage int32

const (
	Zero WaitStats_Usage = 0
	One  WaitStats_Usage = 1
)

var WaitStats_Usage_name = map[int32]string{
	0: "Zero",
	1: "One",
}

var WaitStats_Usage_value = map[string]int32{
	"Zero": 0,
	"One":  1,
}

func (WaitStats_Usage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_428b281496788550, []int{0, 0}
}

// WaitStats is a message that tracks stats related to waiting for expired
// descriptor leases to expire. Used in WaitForOneVersion and WaitForNoVersion.
type WaitStats struct {
	// Number of retry attempts made
	NumRetries int32 `protobuf:"varint,1,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
	// The number of expired descriptors that still exist in the last call. This
	// will be set to zero when the wait is finished.
	LastCount int32 `protobuf:"varint,2,opt,name=last_count,json=lastCount,proto3" json:"last_count,omitempty"`
	// This is the number of distinct SQL instances that still have unexpired leases.
	NumSqlInstances int32 `protobuf:"varint,3,opt,name=num_sql_instances,json=numSqlInstances,proto3" json:"num_sql_instances,omitempty"`
	// If we are waiting on at least one lease, this is one of the sql_instance_id
	// values we are waiting on. If the count is 0, this value will be 0.
	SampleSqlInstanceId int32 `protobuf:"varint,4,opt,name=sample_sql_instance_id,json=sampleSqlInstanceId,proto3" json:"sample_sql_instance_id,omitempty"`
	// The elapsed time, in milliseconds, spent waiting for the expired leased
	// descriptors to leave.
	ElapsedTimeInMs int64           `protobuf:"varint,5,opt,name=elapsed_time_in_ms,json=elapsedTimeInMs,proto3" json:"elapsed_time_in_ms,omitempty"`
	Usage           WaitStats_Usage `protobuf:"varint,6,opt,name=usage,proto3,enum=cockroach.sql.sqlbase.WaitStats_Usage" json:"usage,omitempty"`
}

func (m *WaitStats) Reset()         { *m = WaitStats{} }
func (m *WaitStats) String() string { return proto.CompactTextString(m) }
func (*WaitStats) ProtoMessage()    {}
func (*WaitStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_428b281496788550, []int{0}
}
func (m *WaitStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WaitStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitStats.Merge(m, src)
}
func (m *WaitStats) XXX_Size() int {
	return m.Size()
}
func (m *WaitStats) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitStats.DiscardUnknown(m)
}

var xxx_messageInfo_WaitStats proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.sqlbase.WaitStats_Usage", WaitStats_Usage_name, WaitStats_Usage_value)
	proto.RegisterType((*WaitStats)(nil), "cockroach.sql.sqlbase.WaitStats")
}

func init() { proto.RegisterFile("txtmsg/lease.proto", fileDescriptor_428b281496788550) }

var fileDescriptor_428b281496788550 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0xaa, 0xd3, 0x40,
	0x18, 0x86, 0x33, 0xa7, 0x27, 0xc7, 0x76, 0x04, 0x5b, 0xc7, 0x1f, 0x42, 0xc1, 0xb1, 0x14, 0x91,
	0xa2, 0x90, 0x80, 0x5d, 0xb8, 0x71, 0xa5, 0xab, 0x2e, 0x44, 0x48, 0x15, 0xb1, 0x9b, 0x30, 0x99,
	0x0c, 0xe9, 0xd0, 0xf9, 0x49, 0xf2, 0x4d, 0xc0, 0x4b, 0x70, 0xe9, 0x3d, 0xe8, 0xc2, 0x9b, 0x70,
	0xdf, 0x65, 0x97, 0x5d, 0x6a, 0x7a, 0x23, 0x92, 0x44, 0xab, 0xc2, 0x59, 0x0c, 0x7c, 0xf3, 0xbe,
	0xcf, 0x03, 0xf3, 0x83, 0x89, 0xfb, 0xe8, 0x34, 0xe4, 0x91, 0x12, 0x0c, 0x44, 0x58, 0x54, 0xd6,
	0x59, 0x72, 0x8f, 0x5b, 0xbe, 0xab, 0x2c, 0xe3, 0xdb, 0x10, 0x4a, 0xd5, 0xae, 0x94, 0x81, 0x98,
	0xde, 0xcd, 0x6d, 0x6e, 0x3b, 0x22, 0x6a, 0xa7, 0x1e, 0x9e, 0x7f, 0xbf, 0xc0, 0xa3, 0xf7, 0x4c,
	0xba, 0xb5, 0x63, 0x0e, 0xc8, 0x43, 0x7c, 0xd3, 0xd4, 0x3a, 0xa9, 0x84, 0xab, 0xa4, 0x80, 0x00,
	0xcd, 0xd0, 0xc2, 0x8f, 0xb1, 0xa9, 0x75, 0xdc, 0x27, 0xe4, 0x01, 0xc6, 0x8a, 0x81, 0x4b, 0xb8,
	0xad, 0x8d, 0x0b, 0x2e, 0xba, 0x7e, 0xd4, 0x26, 0xaf, 0xda, 0x80, 0x3c, 0xc1, 0xb7, 0x5b, 0x1f,
	0x4a, 0x95, 0x48, 0x03, 0x8e, 0x19, 0x2e, 0x20, 0x18, 0x74, 0xd4, 0xd8, 0xd4, 0x7a, 0x5d, 0xaa,
	0xd5, 0x9f, 0x98, 0x2c, 0xf1, 0x7d, 0x60, 0xba, 0x50, 0xe2, 0x3f, 0x3c, 0x91, 0x59, 0x70, 0xd9,
	0x09, 0x77, 0xfa, 0xf6, 0x1f, 0x67, 0x95, 0x91, 0xa7, 0x98, 0x08, 0xc5, 0x0a, 0x10, 0x59, 0xe2,
	0xa4, 0x16, 0x89, 0x34, 0x89, 0x86, 0xc0, 0x9f, 0xa1, 0xc5, 0x20, 0x1e, 0xff, 0x6e, 0xde, 0x4a,
	0x2d, 0x56, 0xe6, 0x35, 0x90, 0x17, 0xd8, 0xaf, 0x81, 0xe5, 0x22, 0xb8, 0x9a, 0xa1, 0xc5, 0xad,
	0x67, 0x8f, 0xc3, 0x6b, 0x1f, 0x26, 0x3c, 0x5f, 0x3f, 0x7c, 0xd7, 0xd2, 0x71, 0x2f, 0xcd, 0x1f,
	0x61, 0xbf, 0xdb, 0x93, 0x21, 0xbe, 0xdc, 0x88, 0xca, 0x4e, 0x3c, 0x72, 0x03, 0x0f, 0xde, 0x18,
	0x31, 0x41, 0xd3, 0xe1, 0xa7, 0x2f, 0xd4, 0xfb, 0xf6, 0x95, 0x7a, 0x2f, 0x3f, 0xec, 0x7f, 0x52,
	0x6f, 0xdf, 0x50, 0x74, 0x68, 0x28, 0x3a, 0x36, 0x14, 0xfd, 0x68, 0x28, 0xfa, 0x7c, 0xa2, 0xde,
	0xe1, 0x44, 0xbd, 0xe3, 0x89, 0x7a, 0x9b, 0xe7, 0xb9, 0x74, 0xdb, 0x3a, 0x0d, 0xb9, 0xd5, 0xd1,
	0xf9, 0x00, 0x59, 0xfa, 0x77, 0x8e, 0x8a, 0x5d, 0x1e, 0x41, 0xa9, 0x22, 0xce, 0x1c, 0x53, 0x36,
	0x8f, 0x32, 0x01, 0xbc, 0x48, 0xd3, 0xab, 0xee, 0x87, 0x96, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x82, 0xd9, 0x8d, 0x93, 0xe4, 0x01, 0x00, 0x00,
}

func (m *WaitStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Usage != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.Usage))
		i--
		dAtA[i] = 0x30
	}
	if m.ElapsedTimeInMs != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.ElapsedTimeInMs))
		i--
		dAtA[i] = 0x28
	}
	if m.SampleSqlInstanceId != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.SampleSqlInstanceId))
		i--
		dAtA[i] = 0x20
	}
	if m.NumSqlInstances != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.NumSqlInstances))
		i--
		dAtA[i] = 0x18
	}
	if m.LastCount != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.LastCount))
		i--
		dAtA[i] = 0x10
	}
	if m.NumRetries != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.NumRetries))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLease(dAtA []byte, offset int, v uint64) int {
	offset -= sovLease(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WaitStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumRetries != 0 {
		n += 1 + sovLease(uint64(m.NumRetries))
	}
	if m.LastCount != 0 {
		n += 1 + sovLease(uint64(m.LastCount))
	}
	if m.NumSqlInstances != 0 {
		n += 1 + sovLease(uint64(m.NumSqlInstances))
	}
	if m.SampleSqlInstanceId != 0 {
		n += 1 + sovLease(uint64(m.SampleSqlInstanceId))
	}
	if m.ElapsedTimeInMs != 0 {
		n += 1 + sovLease(uint64(m.ElapsedTimeInMs))
	}
	if m.Usage != 0 {
		n += 1 + sovLease(uint64(m.Usage))
	}
	return n
}

func sovLease(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLease(x uint64) (n int) {
	return sovLease(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WaitStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRetries", wireType)
			}
			m.NumRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRetries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCount", wireType)
			}
			m.LastCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSqlInstances", wireType)
			}
			m.NumSqlInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSqlInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleSqlInstanceId", wireType)
			}
			m.SampleSqlInstanceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleSqlInstanceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElapsedTimeInMs", wireType)
			}
			m.ElapsedTimeInMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElapsedTimeInMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usage |= WaitStats_Usage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLease(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLease(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLease
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLease
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLease
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLease
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLease        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLease          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLease = fmt.Errorf("proto: unexpected end of group")
)
